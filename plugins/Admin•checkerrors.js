import fs from 'fs'
import path from 'path'
import { execSync } from 'child_process'

let handler = async (m, { conn, isOwner, isAdmin }) => {
    if (!isAdmin && !isOwner) {
        return conn.reply(m.chat, 'üö´ *Solo los administradores pueden usar este comando*', m)
    }

    try {
        await conn.reply(m.chat, 'üîç *Iniciando diagn√≥stico del sistema...*', m)

        // Verificar base de datos
        let dbErrors = []
        let configErrors = []
        let pluginErrors = []

        // Verificar estructura de la base de datos
        if (!global.db) dbErrors.push('‚ùå Base de datos global no inicializada')
        if (!global.db?.data) dbErrors.push('‚ùå Datos de la base de datos no disponibles')
        if (!global.db?.data?.chats) dbErrors.push('‚ùå Configuraci√≥n de chats no disponible')
        if (!global.db?.data?.users) dbErrors.push('‚ùå Datos de usuarios no disponibles')
        if (!global.db?.data?.settings) dbErrors.push('‚ùå Configuraciones del bot no disponibles')

        // Verificar configuraci√≥n del chat actual
        if (m.isGroup) {
            let chat = global.db.data.chats[m.chat]
            if (!chat) {
                configErrors.push('‚ö†Ô∏è Configuraci√≥n del grupo no encontrada')
                // Crear configuraci√≥n por defecto
                global.db.data.chats[m.chat] = {
                    isBanned: false,
                    welcome: true,
                    detect: true,
                    antiLink: false,
                    antiBot: false,
                    antifake: false,
                    nsfw: false,
                    autosticker: false,
                    autoresponder: false,
                    delete: false,
                    modoadmin: false,
                    autolevelup: false
                }
                configErrors.push('‚úÖ Configuraci√≥n del grupo restablecida')
            }
        }

        // Verificar plugins cr√≠ticos
        try {
            let fs = await import('fs')
            let pluginsDir = './plugins'
            if (!fs.existsSync(pluginsDir)) {
                pluginErrors.push('‚ùå Carpeta de plugins no encontrada')
            } else {
                // Verificar algunos plugins cr√≠ticos
                let criticalPlugins = [
                    'grupo-banchat.js',
                    'grupo-unbanchat.js',
                    'main-allfake.js',
                    'config-nable.js'
                ]

                for (let plugin of criticalPlugins) {
                    if (!fs.existsSync(`${pluginsDir}/${plugin}`)) {
                        pluginErrors.push(`‚ö†Ô∏è Plugin ${plugin} no encontrado`)
                    }
                }
            }
        } catch (e) {
            pluginErrors.push(`‚ùå Error verificando plugins: ${e.message}`)
        }

        // Generar reporte
        let errorReport = `üîç *DIAGN√ìSTICO DEL SISTEMA*\n\n`
        errorReport += `*Bot:* ùôéùôÉùôäùôîùôä ùôÉùôÑùôâùòºùôèùòº ·Éù·É´ ùòΩ ÍÇ¶ ·éø\n`
        errorReport += `*Fecha:* ${new Date().toLocaleString()}\n`
        errorReport += `*Chat:* ${m.isGroup ? await conn.getName(m.chat) : 'Privado'}\n\n`

        errorReport += `üìä *ESTADO DE LA BASE DE DATOS:*\n`
        if (dbErrors.length === 0) {
            errorReport += `‚úÖ Base de datos funcionando correctamente\n\n`
        } else {
            errorReport += dbErrors.join('\n') + '\n\n'
        }

        errorReport += `‚öôÔ∏è *CONFIGURACIONES:*\n`
        if (configErrors.length === 0) {
            errorReport += `‚úÖ Configuraciones funcionando correctamente\n\n`
        } else {
            errorReport += configErrors.join('\n') + '\n\n'
        }

        errorReport += `üîå *PLUGINS:*\n`
        if (pluginErrors.length === 0) {
            errorReport += `‚úÖ Plugins principales disponibles\n\n`
        } else {
            errorReport += pluginErrors.join('\n') + '\n\n'
        }

        // Estado general
        let totalErrors = dbErrors.length + configErrors.filter(e => e.includes('‚ùå')).length + pluginErrors.filter(e => e.includes('‚ùå')).length
        if (totalErrors === 0) {
            errorReport += `üéâ *ESTADO GENERAL: √ìPTIMO*\n`
            errorReport += `‚úÖ No se encontraron errores cr√≠ticos`
        } else {
            errorReport += `‚ö†Ô∏è *ESTADO GENERAL: ${totalErrors} ERRORES ENCONTRADOS*\n`
            errorReport += `üîß Usa .autofix para intentar reparar autom√°ticamente`
        }

        await conn.reply(m.chat, errorReport, m)

    } catch (e) {
        console.error('Error en checkerrors:', e)
        await conn.reply(m.chat, `‚ùå Error al ejecutar diagn√≥stico: ${e.message}`, m)
    }
}

handler.help = ['checkerrors', 'diagnostico']
handler.tags = ['admin', 'tools']
handler.command = ['checkerrors', 'diagnostico', 'checkbot', 'verificar']
handler.admin = true
handler.register = true

export default handler